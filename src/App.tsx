import React, { useState, useEffect } from "react";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";
import "./App.css";
import type { TelegramUser } from "./types/telegram";

function App() {
  const [formData, setFormData] = useState({
    establishment: "",
    order: "",
    comment: "",
  });
  console.log("formData: ", formData.establishment);
  const [loading, setLoading] = useState(true);

  const [tgUser, setTgUser] = useState<TelegramUser | null>(null);

  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å Telegram Web App
    if (typeof window !== "undefined" && window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;

      console.log("Telegram WebApp —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ");

      // –†–æ–∑—à–∏—Ä—é—î–º–æ –º—ñ–Ω—ñ-–¥–æ–¥–∞—Ç–æ–∫ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
      tg.expand();

      // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –∫–Ω–æ–ø–∫—É (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–≤–æ—é)
      tg.MainButton.hide();

      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const user = tg.initDataUnsafe?.user;
      console.log("Telegram User:", user);
      setTgUser(user || null);

      // // // –°–ø–æ—Å—ñ–± 1: –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –∑ –±–æ—Ç–∞)
      // const urlParams = new URLSearchParams(window.location.search);
      // console.log("urlParams: ", urlParams);
      // const establishmentFromUrl = urlParams.get("establishment");
      // console.log("establishmentFromUrl: ", establishmentFromUrl);
      // const orderFromUrl = urlParams.get("order");
      // console.log("orderFromUrl: ", orderFromUrl);
      // const userIdFromUrl = urlParams.get("user_id");
      // console.log("userIdFromUrl: ", userIdFromUrl);

      // if (establishmentFromUrl || orderFromUrl) {
      //   setFormData((prev) => ({
      //     ...prev,
      //     establishment: establishmentFromUrl || prev.establishment,
      //     order: orderFromUrl || prev.order,
      //   }));
      // }

      // –°–ø–æ—Å—ñ–± 2: –Ø–∫—â–æ —î user ID, –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ API
      const userId = user?.id;
      console.log("userId: ", userId);
      if (userId) {
        fetchUserDataFromAPI(userId);
      }

      setLoading(false);
    } else {
      console.log("Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –±—Ä–∞—É–∑–µ—Ä—ñ");
      setLoading(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–≤–æ—î—ó –±–∞–∑–∏ —á–µ—Ä–µ–∑ Make.com –∞–±–æ API
  const fetchUserDataFromAPI = async (telegramUserId: string | number) => {
    try {
      // –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–ø–∏—Ç—É –¥–æ Make.com webhook
      const response = await fetch(
        `https://hook.eu2.make.com/len9lty3ig6ugp97uwzbe55bvvsfdpcf?telegram_id=${telegramUserId}`
      );

      if (response.ok) {
        const userData = await response.json();
        console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", userData);

        // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –¥–∞–Ω–∏–º–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        setFormData((prev) => ({
          ...prev,
          establishment: userData[0].company || prev.establishment,
          // —ñ–Ω—à—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        }));
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    }
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    const tg = window.Telegram?.WebApp;

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!formData.establishment.trim()) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∑–∞–∫–ª–∞–¥");
      return;
    }

    if (!formData.order.trim()) {
      alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è");
      return;
    }

    try {
      // –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
      const orderData = {
        establishment: formData.establishment,
        order: formData.order,
        comment: formData.comment,
        telegramUserId: tgUser?.id,
        userName: tgUser
          ? `${tgUser.first_name}${
              tgUser.last_name ? " " + tgUser.last_name : ""
            }`
          : "–ù–µ–≤—ñ–¥–æ–º–∏–π",
        username: tgUser?.username || "",
        timestamp: new Date().toISOString(),
        date: new Date().toLocaleDateString("uk-UA"),
        time: new Date().toLocaleTimeString("uk-UA"),
      };

      console.log("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", orderData);

      // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ Make.com –∞–±–æ —Ç–≤–æ–≥–æ API
      const response = await fetch(
        "https://hook.eu1.make.com/YOUR_ORDER_WEBHOOK_ID",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(orderData),
        }
      );

      if (response.ok) {
        // –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
        if (tg) {
          tg.showAlert("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! –î—è–∫—É—î–º–æ!", () => {
            tg.close();
          });
        } else {
          alert("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!");
          // –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
          setFormData({
            establishment: "",
            order: "",
            comment: "",
          });
        }
      } else {
        throw new Error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", error);

      if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showAlert(
          "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        );
      } else {
        alert("–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
    }
  };

  if (loading) {
    return (
      <Box sx={{ p: 3, textAlign: "center" }}>
        <Typography>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 2, maxWidth: "100%" }}>
      {/* –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ */}
      {tgUser && (
        <Box sx={{ mb: 2, p: 2, bgcolor: "#f5f5f5", borderRadius: 1 }}>
          <Typography variant="h6">–í—ñ—Ç–∞—î–º–æ, {tgUser.first_name}! üëã</Typography>
          {tgUser.username && (
            <Typography variant="body2" color="text.secondary">
              @{tgUser.username}
            </Typography>
          )}
        </Box>
      )}

      <Typography variant="h5" sx={{ mb: 2, textAlign: "center" }}>
        –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
      </Typography>

      <Box
        component="form"
        id="form"
        onSubmit={handleSubmit}
        sx={{
          display: "flex",
          flexDirection: "column",
          gap: 3,
          width: "100%",
        }}
      >
        <TextField
          name="establishment"
          label="–ó–∞–∫–ª–∞–¥"
          disabled
          variant="outlined"
          value={formData.establishment}
          onChange={handleInputChange}
          placeholder="–ù–∞–∑–≤–∞ –∑–∞–∫–ª–∞–¥—É –∞–±–æ –∞–¥—Ä–µ—Å–∞"
          required
          sx={{ width: "100%" }}
        />

        <TextField
          name="order"
          multiline
          label="–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
          variant="outlined"
          rows={5}
          value={formData.order}
          onChange={handleInputChange}
          placeholder="–û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è..."
          required
          sx={{ width: "100%" }}
        />

        <TextField
          name="comment"
          multiline
          label="–ö–æ–º–µ–Ω—Ç–∞—Ä"
          variant="outlined"
          rows={4}
          value={formData.comment}
          onChange={handleInputChange}
          placeholder="–î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è –∞–±–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ..."
          sx={{ width: "100%" }}
        />

        <Button
          size="large"
          type="submit"
          variant="contained"
          sx={{
            py: 1.5,
            fontSize: "1.1rem",
            fontWeight: "bold",
          }}
        >
          üì¶ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        </Button>
      </Box>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è */}
      {!window.Telegram?.WebApp && (
        <Box sx={{ mt: 3, p: 2, bgcolor: "#fff3cd", borderRadius: 1 }}>
          <Typography variant="body2" color="text.secondary">
            ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–∏–π —Ä–µ–∂–∏–º - Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
          </Typography>
        </Box>
      )}
    </Box>
  );
}

export default App;
